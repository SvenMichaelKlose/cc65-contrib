;
; File generated by cc65 v 2.11.0
;
	.fopt		compiler,"cc65 v 2.11.0"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_cputcxy
	.import		_cputsxy
	.import		_cprintf
	.import		_cgetc
	.import		_cursor
	.import		_revers
	.import		_memcpy
	.import		_memmove
	.import		_memset
	.export		_doGame
	.export		_paintElement
	.export		_paintCave
	.export		_caveToArray
	.export		_pmgInit
	.export		_pmgSetPos
	.export		_delay
	.export		_doGratulation
	.export		_doGameOver
	.export		_setTextModeSettings
	.import		_rmtInitMenuMusic
	.import		_rmtInitGameMusic
	.import		_rmtPlayDiamond
	.import		_rmtPlayPicked
	.import		_rmtPlayDeath
	.import		_rmtPlayGratulation
	.import		_rmtPlayJump
	.import		_rmtSetVBI
	.import		_rmtAllStop
	.import		_rmtSuspend
	.import		_rmtResume
	.import		_rmtRestoreVBI
	.import		_asmReboot
	.export		_moveLeft
	.export		_moveRight
	.export		_moveUp
	.export		_moveDown
	.export		_jumpUp
	.export		_fallDown
	.export		_handleHighJump
	.export		_updateStatusBar
	.export		_checkTreasure
	.export		_checkDeath
	.export		_maxCaveReached
	.export		_startingCave
	.export		_dmactlStore
	.export		_menuResult
	.export		_lives
	.export		_currentCave
	.export		_treasure
	.export		_collected
	.export		_caveDeath
	.export		_caveAllPicked
	.export		_stayHere
	.export		_overType
	.export		_menuDl1
	.export		_menuDl2
	.export		_x1
	.export		_y1
	.export		_i1
	.export		_i2
	.export		_z1
	.export		_cave
	.export		_caveBroken
	.export		_minx
	.export		_miny
	.export		_minerData
	.export		_difficultyNames
	.export		_difficultyLives
	.export		_hijs
	.export		_hiJump
	.import		_mvDelay
	.import		_dliHandler
	.export		_controlSpeed
	.export		_brokenSpeed
	.export		_hijumpSpeedA
	.export		_hijumpSpeedB
	.export		_controlDelay
	.export		_fallSpeed
	.export		_passable
	.export		_notJump
	.export		_broken
	.export		_deathable
	.export		_map
	.export		_p0x
	.export		_p0y
	.export		_drawMainMenu
	.export		_main
	.export		_sound

.segment	"DATA"

_minerData:
	.byte	$3C
	.byte	$7E
	.byte	$5A
	.byte	$DB
	.byte	$FF
	.byte	$C3
	.byte	$66
	.byte	$3C
_difficultyNames:
	.addr	L0001
	.addr	L0001+9
	.addr	L0001+18
_difficultyLives:
	.byte	$04
	.byte	$05
	.byte	$05
_passable:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_notJump:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_broken:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_deathable:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map:
	.byte	$C0
	.byte	$C2
	.byte	$C4
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$CC
	.byte	$4E
	.byte	$E1
	.byte	$E3
	.byte	$E5
	.byte	$E7
	.byte	$E9
	.byte	$EB
	.byte	$ED
	.byte	$EF
	.byte	$DA
	.byte	$03
	.byte	$50
	.byte	$52
	.byte	$54
	.byte	$56
	.byte	$58
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00

.segment	"RODATA"

L0001:
	.byte	$20,$20,$4E,$4F,$52,$4D,$41,$4C,$00,$4D,$4F,$44,$45,$52,$41,$54
	.byte	$45,$00,$20,$20,$20,$20,$45,$41,$53,$59,$00,$43,$41,$56,$45,$52
	.byte	$4E,$53,$20,$4F,$46,$20,$54,$48,$45,$20,$4C,$4F,$53,$54,$20,$4D
	.byte	$49,$4E,$45,$52,$00,$42,$41,$4B,$54,$52,$41,$20,$28,$4C,$47,$50
	.byte	$4C,$29,$20,$32,$30,$30,$37,$00,$47,$75,$69,$64,$65,$20,$74,$68
	.byte	$65,$20,$6D,$69,$6E,$65,$72,$20,$74,$68,$72,$6F,$75,$67,$68,$20
	.byte	$31,$34,$20,$64,$61,$6E,$67,$65,$72,$6F,$75,$73,$00,$63,$61,$76
	.byte	$65,$73,$2E,$20,$53,$74,$61,$79,$20,$61,$6C,$69,$76,$65,$20,$61
	.byte	$6E,$64,$20,$63,$6F,$6C,$6C,$65,$63,$74,$20,$61,$6C,$6C,$00,$64
	.byte	$69,$61,$6D,$6F,$6E,$64,$73,$20,$69,$6E,$20,$65,$61,$63,$68,$20
	.byte	$63,$61,$76,$65,$2E,$00,$44,$00,$50,$72,$65,$73,$73,$00,$74,$6F
	.byte	$20,$73,$74,$61,$72,$74,$20,$67,$61,$6D,$65,$00,$50,$72,$65,$73
	.byte	$73,$00,$74,$6F,$20,$73,$65,$74,$20,$73,$74,$61,$72,$74,$69,$6E
	.byte	$67,$20,$63,$61,$76,$65,$3A,$00,$50,$72,$65,$73,$73,$00,$74,$6F
	.byte	$20,$73,$65,$74,$20,$64,$69,$66,$66,$69,$63,$75,$6C,$74,$79,$3A
	.byte	$00,$53,$54,$41,$52,$54,$00,$43,$00,$44,$00,$25,$32,$64,$00,$25
	.byte	$32,$64,$00,$43,$6F,$6E,$67,$72,$61,$74,$75,$6C,$61,$74,$69,$6F
	.byte	$6E,$73,$20,$21,$00,$54,$68,$65,$20,$6C,$6F,$73,$74,$20,$6D,$69
	.byte	$6E,$65,$72,$20,$68,$61,$73,$20,$70,$61,$73,$73,$65,$64,$20,$61
	.byte	$6C,$6C,$20,$63,$61,$76,$65,$73,$2E,$00,$54,$68,$61,$6E,$6B,$20
	.byte	$79,$6F,$75,$20,$66,$6F,$72,$20,$70,$6C,$61,$79,$69,$6E,$67,$20
	.byte	$74,$68,$69,$73,$20,$67,$61,$6D,$65,$2E,$00,$4E,$6F,$77,$20,$79
	.byte	$6F,$75,$20,$73,$68,$6F,$75,$6C,$64,$20,$63,$72,$65,$61,$74,$65
	.byte	$20,$79,$6F,$75,$72,$20,$6F,$77,$6E,$20,$63,$61,$76,$65,$73,$2E
	.byte	$00,$50,$72,$65,$73,$73,$20,$53,$50,$41,$43,$45,$20,$74,$6F,$20
	.byte	$63,$6F,$6E,$74,$69,$6E,$75,$65,$00,$47,$41,$4D,$45,$20,$49,$53
	.byte	$20,$4F,$56,$45,$52,$00,$50,$75,$73,$68,$20,$53,$50,$41,$43,$45
	.byte	$20,$74,$6F,$20,$63,$6F,$6E,$74,$69,$6E,$75,$65,$00

.segment	"BSS"

_maxCaveReached:
	.res	1,$00
_startingCave:
	.res	1,$00
_dmactlStore:
	.res	1,$00
_menuResult:
	.res	1,$00
_lives:
	.res	1,$00
_currentCave:
	.res	1,$00
_treasure:
	.res	1,$00
_collected:
	.res	1,$00
_caveDeath:
	.res	1,$00
_caveAllPicked:
	.res	1,$00
_stayHere:
	.res	1,$00
_overType:
	.res	1,$00
_menuDl1:
	.res	1,$00
_menuDl2:
	.res	1,$00
_x1:
	.res	1,$00
_y1:
	.res	1,$00
_i1:
	.res	2,$00
_i2:
	.res	2,$00
_z1:
	.res	1,$00
_cave:
	.res	440,$00
_caveBroken:
	.res	440,$00
_minx:
	.res	1,$00
_miny:
	.res	1,$00
_hijs:
	.res	1,$00
_hiJump:
	.res	1,$00
_controlSpeed:
	.res	1,$00
_brokenSpeed:
	.res	1,$00
_hijumpSpeedA:
	.res	1,$00
_hijumpSpeedB:
	.res	1,$00
_controlDelay:
	.res	1,$00
_fallSpeed:
	.res	1,$00
_p0x:
	.res	1,$00
_p0y:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ doGame ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_doGame: near

.segment	"CODE"

	jsr     enter
	ldy     #$0D
	jsr     subysp
	ldx     #$00
	lda     #$00
	sta     $0230
	ldx     #$00
	lda     #$60
	sta     $0231
	ldx     #$00
	lda     #$88
	sta     $02F4
	ldx     #$00
	lda     _startingCave
	sta     _currentCave
	lda     #<(_difficultyLives)
	ldx     #>(_difficultyLives)
	clc
	adc     _controlSpeed
	bcc     L01CF
	inx
L01CF:	ldy     #$00
	jsr     ldauidx
	sta     _lives
	lda     #<(_dliHandler)
	ldx     #>(_dliHandler)
	ldy     #$00
	jsr     staxysp
	ldy     #$01
	jsr     ldaxysp
	ldx     #$00
	sta     $0200
	ldy     #$01
	jsr     ldaxysp
	txa
	ldx     #$00
	sta     $0201
	ldx     #$00
	lda     #$C0
	sta     $D40E
L01E1:	ldx     #$00
	lda     $022F
	sta     _dmactlStore
	ldx     #$00
	lda     #$00
	sta     $022F
	lda     _currentCave
	jsr     pusha
	jsr     _caveToArray
	ldx     #$00
	lda     #$00
	sta     _collected
	ldx     #$00
	lda     #$0C
	sta     $02C5
	ldx     #$00
	lda     #$86
	sta     $02C6
	ldx     #$00
	lda     #$F2
	sta     $02C4
	ldx     #$00
	lda     #$F4
	sta     $02C7
	ldy     #$00
	jsr     _paintCave
	ldy     #$00
	jsr     _updateStatusBar
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	jsr     _pmgSetPos
	ldx     #$00
	lda     _dmactlStore
	sta     $022F
	ldx     #$00
	lda     #$01
	sta     _stayHere
	ldx     #$00
	lda     #$00
	ldy     #$09
	sta     (sp),y
	ldx     #$00
	lda     #$00
	sta     _caveDeath
	ldx     #$00
	lda     #$00
	sta     _caveAllPicked
	ldx     #$00
	lda     #$00
	ldy     #$06
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$05
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$04
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$02
	sta     (sp),y
L021F:	lda     _stayHere
	jne     L0221
	lda     #<(_deathable)
	ldx     #>(_deathable)
	ldy     #$0B
	clc
	adc     (sp),y
	bcc     L0223
	inx
L0223:	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     booleq
	jne     L0221
	ldx     #$00
	lda     #$00
	jeq     L0224
L0221:	ldx     #$00
	lda     #$01
L0224:	jeq     L0220
	ldx     #$00
	lda     $D01F
	cmp     #$06
	jsr     booleq
	jeq     L0225
	ldx     #$00
	lda     #$00
	sta     _stayHere
	ldx     #$00
	lda     #$01
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     #$00
	sta     $004D
	jmp     L0220
L0225:	ldx     #$00
	lda     $D01F
	cmp     #$03
	jsr     booleq
	jeq     L0232
	ldx     #$00
	lda     #$01
	sta     _caveDeath
	ldx     #$00
	lda     #$00
	sta     _stayHere
	ldx     #$00
	lda     #$00
	sta     $004D
	jmp     L0220
L0232:	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	ldy     #$08
	sta     (sp),y
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	ldy     #$0B
	sta     (sp),y
	lda     #<(_passable)
	ldx     #>(_passable)
	ldy     #$0B
	clc
	adc     (sp),y
	bcc     L024A
	inx
L024A:	ldy     #$00
	jsr     ldauidx
	cmp     #$01
	jsr     booleq
	jeq     L024B
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	cmp     #$07
	jsr     boolne
	jeq     L024B
	ldy     #$0B
	ldx     #$00
	lda     (sp),y
	cmp     #$07
	jsr     boolne
	jne     L0248
L024B:	ldx     #$00
	lda     #$00
	jeq     L024C
L0248:	ldx     #$00
	lda     #$01
L024C:	jeq     L0247
	ldy     #$0A
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     $0014
	jsr     tosneax
	jeq     L025F
	ldy     #$09
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$09
	sta     (sp),y
	pla
	ldx     #$00
	lda     $0014
	ldy     #$0A
	sta     (sp),y
	ldy     #$09
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     _fallSpeed
	jsr     toseqax
	jeq     L025F
	ldy     #$00
	jsr     _fallDown
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$05
	sta     (sp),y
	pla
	ldy     #$00
	jsr     _checkDeath
	ldx     #$00
	lda     #$00
	ldy     #$09
	sta     (sp),y
	ldx     #$00
	lda     #$01
	ldy     #$04
	sta     (sp),y
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	cmp     #$07
	jsr     booluge
	jeq     L025F
	ldx     #$00
	lda     #$00
	sta     _stayHere
	ldx     #$00
	lda     #$01
	sta     _caveDeath
L025F:	jmp     L0265
L0247:	ldx     #$00
	lda     #$00
	ldy     #$09
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$05
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$04
	sta     (sp),y
L0265:	lda     #<(_broken)
	ldx     #>(_broken)
	ldy     #$0B
	clc
	adc     (sp),y
	bcc     L026F
	inx
L026F:	ldy     #$00
	jsr     ldauidx
	cmp     #$01
	jsr     booleq
	jeq     L0290
	ldx     #$00
	lda     _miny
	jsr     incax1
	sta     _y1
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     $0014
	jsr     tosneax
	jeq     L0272
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	pha
	clc
	adc     #$01
	ldy     #$00
	jsr     staspidx
	pla
	ldx     #$00
	lda     $0014
	ldy     #$03
	sta     (sp),y
L0272:	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldx     #$00
	lda     _brokenSpeed
	jsr     toseqax
	jeq     L0290
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staspidx
	ldy     #$0B
	ldx     #$00
	lda     (sp),y
	cmp     #$0F
	jsr     boolult
	jeq     L0285
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	pha
	clc
	adc     #$01
	ldy     #$00
	jsr     staspidx
	pla
	lda     _minx
	jsr     pusha
	lda     _y1
	jsr     pusha
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	jsr     _paintElement
	jmp     L0290
L0285:	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$1D
	ldy     #$00
	jsr     staspidx
	lda     _minx
	jsr     pusha
	lda     _y1
	jsr     pusha
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	jsr     _paintElement
L0290:	ldy     #$0B
	ldx     #$00
	lda     (sp),y
	cmp     #$10
	jsr     booleq
	jeq     L029B
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$1D
	ldy     #$00
	jsr     staspidx
	lda     _minx
	jsr     pusha
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     pusha
	lda     #$1D
	jsr     pusha
	jsr     _paintElement
L029B:	ldx     #$00
	lda     _mvDelay
	cmp     #$00
	jsr     booleq
	jeq     L02B1
	ldx     #$00
	lda     $0278
	ldy     #$0C
	sta     (sp),y
	ldx     #$00
	lda     $0284
	ldy     #$07
	sta     (sp),y
	ldy     #$0C
	ldx     #$00
	lda     (sp),y
	jmp     L02B0
L02B0:	cmp     #$07
	jeq     L02B3
	cmp     #$0B
	jeq     L02DD
	cmp     #$0D
	jeq     L0307
	cmp     #$0E
	jeq     L0310
	jmp     L0327
L02B3:	ldy     #$07
	ldx     #$00
	lda     (sp),y
	cmp     #$00
	jsr     booleq
	jeq     L02B6
	lda     #<(_notJump)
	ldx     #>(_notJump)
	ldy     #$0B
	clc
	adc     (sp),y
	bcc     L02B9
	inx
L02B9:	ldy     #$00
	jsr     ldauidx
	jsr     bnega
	jne     L02B5
L02B6:	ldx     #$00
	lda     #$00
	jeq     L02BA
L02B5:	ldx     #$00
	lda     #$01
L02BA:	jeq     L02B4
	ldy     #$00
	jsr     _rmtPlayJump
	ldx     #$00
	lda     #$00
	sta     $004D
	ldx     #$00
	lda     #$00
	ldy     #$05
	sta     (sp),y
	ldy     #$00
	jsr     _jumpUp
	tax
	jeq     L02C3
	jmp     L02B1
L02C3:	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _jumpUp
	tax
	jeq     L02C7
	jmp     L02B1
L02C7:	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _moveRight
	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _moveRight
	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _moveRight
	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _checkDeath
	jmp     L02B1
L02B4:	ldy     #$00
	jsr     _moveRight
	ldx     #$00
	lda     #$00
	sta     $004D
	ldy     #$00
	jsr     _checkDeath
	jmp     L02B1
L02DD:	ldy     #$07
	ldx     #$00
	lda     (sp),y
	cmp     #$00
	jsr     booleq
	jeq     L02E0
	lda     #<(_notJump)
	ldx     #>(_notJump)
	ldy     #$0B
	clc
	adc     (sp),y
	bcc     L02E3
	inx
L02E3:	ldy     #$00
	jsr     ldauidx
	jsr     bnega
	jne     L02DF
L02E0:	ldx     #$00
	lda     #$00
	jeq     L02E4
L02DF:	ldx     #$00
	lda     #$01
L02E4:	jeq     L02DE
	ldy     #$00
	jsr     _rmtPlayJump
	ldx     #$00
	lda     #$00
	sta     $004D
	ldx     #$00
	lda     #$00
	ldy     #$05
	sta     (sp),y
	ldy     #$00
	jsr     _jumpUp
	tax
	jeq     L02ED
	jmp     L02B1
L02ED:	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _jumpUp
	tax
	jeq     L02F1
	jmp     L02B1
L02F1:	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _moveLeft
	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _moveLeft
	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _moveLeft
	ldx     #$01
	lda     #$40
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _checkDeath
	jmp     L02B1
L02DE:	ldy     #$00
	jsr     _moveLeft
	ldx     #$00
	lda     #$00
	sta     $004D
	ldy     #$00
	jsr     _checkDeath
	jmp     L02B1
L0307:	ldy     #$00
	jsr     _moveDown
	ldx     #$00
	lda     #$00
	sta     $004D
	ldy     #$00
	jsr     _checkDeath
	jmp     L02B1
L0310:	ldy     #$07
	ldx     #$00
	lda     (sp),y
	cmp     #$00
	jsr     booleq
	jeq     L0311
	lda     #<(_notJump)
	ldx     #>(_notJump)
	ldy     #$0B
	clc
	adc     (sp),y
	bcc     L0316
	inx
L0316:	ldy     #$00
	jsr     ldauidx
	jeq     L0313
	jmp     L02B1
L0313:	ldx     #$00
	lda     #$00
	ldy     #$05
	sta     (sp),y
	ldy     #$00
	jsr     _rmtPlayJump
	ldx     #$00
	lda     #$00
	sta     $004D
	ldy     #$00
	jsr     _handleHighJump
	jmp     L02B1
L0311:	ldy     #$00
	jsr     _moveUp
	ldx     #$00
	lda     #$00
	sta     $004D
	ldy     #$00
	jsr     _checkDeath
	jmp     L02B1
L0327:	ldx     #$00
	lda     #$00
	sta     _mvDelay
	jmp     L02B1
L02B1:	jmp     L021F
L0220:	ldy     #$02
	lda     (sp),y
	jeq     L032A
	ldx     #$00
	lda     #$00
	sta     _overType
	jmp     L01E2
L032A:	lda     _caveAllPicked
	jeq     L032E
	ldx     #$00
	lda     _currentCave
	pha
	clc
	adc     #$01
	sta     _currentCave
	pla
	ldx     #$00
	lda     _currentCave
	cmp     #$0D
	jsr     booleq
	jeq     L0331
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _pmgSetPos
	ldx     #$00
	lda     #$02
	sta     _overType
	jmp     L01E2
	jmp     L0339
L0331:	ldx     #$00
	lda     _currentCave
	jsr     pushax
	ldx     #$00
	lda     _maxCaveReached
	jsr     tosugtax
	jeq     L0339
	ldx     #$00
	lda     _currentCave
	sta     _maxCaveReached
L0339:	ldy     #$00
	jsr     _rmtPlayPicked
	jmp     L01E1
L032E:	lda     _caveDeath
	jeq     L033E
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _pmgSetPos
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	lda     #$12
	jsr     pusha
	jsr     _paintElement
	ldy     #$00
	jsr     _rmtPlayDeath
	ldx     #$05
	lda     #$DC
	jsr     pushax
	jsr     _delay
	ldx     #$00
	lda     _lives
	cmp     #$00
	jsr     booleq
	jeq     L034A
	ldx     #$00
	lda     #$01
	sta     _overType
	jmp     L01E2
L034A:	ldx     #$00
	lda     _lives
	pha
	sec
	sbc     #$01
	sta     _lives
	pla
	jmp     L01E1
L033E:	jmp     L01E1
L01E2:	ldx     #$00
	lda     #$60
	sta     $D40E
	ldy     #$0D
	jsr     leavey
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ paintElement (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintElement: near

.segment	"CODE"

	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	lda     #$28
	jsr     tosumula0
	jsr     pushax
	ldx     #$81
	lda     #$50
	jsr     tosaddax
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     tosaddax
	sta     _i2
	stx     _i2+1
	lda     #<(_map)
	ldx     #>(_map)
	ldy     #$00
	clc
	adc     (sp),y
	bcc     L035C
	inx
L035C:	ldy     #$00
	jsr     ldauidx
	sta     _z1
	lda     _i2
	ldx     _i2+1
	jsr     pushax
	ldx     #$00
	lda     _z1
	ldy     #$00
	jsr     staspidx
	lda     _i2
	ldx     _i2+1
	jsr     incax1
	jsr     pushax
	ldx     #$00
	lda     _z1
	jsr     incax1
	ldy     #$00
	jsr     staspidx
	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ paintCave ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintCave: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     #$00
	sta     _y1
L0368:	ldx     #$00
	lda     _y1
	cmp     #$16
	jsr     boolult
	jne     L036B
	jmp     L0369
L036B:	ldx     #$00
	lda     #$00
	sta     _x1
L0370:	ldx     #$00
	lda     _x1
	cmp     #$14
	jsr     boolult
	jne     L0373
	jmp     L036A
L0373:	lda     _x1
	jsr     pusha
	lda     _y1
	jsr     pusha
	ldx     #$00
	lda     _x1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	jsr     _paintElement
	ldx     #$00
	lda     _x1
	pha
	clc
	adc     #$01
	sta     _x1
	pla
	jmp     L0370
L036A:	ldx     #$00
	lda     _y1
	pha
	clc
	adc     #$01
	sta     _y1
	pla
	jmp     L0368
L0369:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ caveToArray (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_caveToArray: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$01
	lda     #$B8
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     tosumulax
	jsr     pushax
	ldx     #$A0
	lda     #$28
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$00
	sta     _treasure
	ldx     #$00
	lda     #$00
	sta     _x1
L0382:	ldx     #$00
	lda     _x1
	cmp     #$14
	jsr     boolult
	jne     L0385
	jmp     L0383
L0385:	ldx     #$00
	lda     #$00
	sta     _y1
L038A:	ldx     #$00
	lda     _y1
	cmp     #$16
	jsr     boolult
	jne     L038D
	jmp     L0384
L038D:	ldy     #$01
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	jsr     decax1
	ldy     #$02
	sta     (sp),y
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	cmp     #$11
	jsr     booleq
	jeq     L0396
	ldx     #$00
	lda     #$1D
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     _x1
	sta     _minx
	ldx     #$00
	lda     _y1
	sta     _miny
L0396:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	cmp     #$14
	jsr     booluge
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	cmp     #$17
	jsr     boolult
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jeq     L039E
	ldx     #$00
	lda     _treasure
	pha
	clc
	adc     #$01
	sta     _treasure
	pla
L039E:	ldx     #$00
	lda     _x1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _y1
	jsr     tosaddax
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	lda     _y1
	pha
	clc
	adc     #$01
	sta     _y1
	pla
	jmp     L038A
L0384:	ldx     #$00
	lda     _x1
	pha
	clc
	adc     #$01
	sta     _x1
	pla
	jmp     L0382
L0383:	lda     #<(_caveBroken)
	ldx     #>(_caveBroken)
	jsr     pushax
	ldx     #$01
	lda     #$B8
	jsr     __bzero
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pmgInit ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgInit: near

.segment	"CODE"

	jsr     enter
	jsr     decsp2
	ldx     #$00
	lda     #$78
	sta     $D407
	ldx     #$00
	lda     #$3E
	sta     $022F
	ldx     #$78
	lda     #$00
	ldy     #$00
	jsr     staxysp
L03B5:	ldy     #$01
	jsr     ldaxysp
	cpx     #$7F
	bne     L03BC
	cmp     #$FF
L03BC:	jsr     boolult
	jne     L03B8
	jmp     L03B6
L03B8:	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L03B5
L03B6:	ldx     #$00
	lda     #$03
	sta     $D01D
	ldx     #$00
	lda     #$A6
	sta     $02C0
	ldx     #$00
	lda     #$38
	sta     _p0x
	ldx     #$00
	lda     _p0x
	sta     $D000
	ldx     #$00
	lda     #$40
	sta     _p0y
	ldx     #$00
	lda     _p0y
	jsr     pushax
	ldx     #$7C
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	lda     #<(_minerData)
	ldx     #>(_minerData)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _memcpy
	ldy     #$02
	jsr     leavey
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pmgSetPos (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgSetPos: near

.segment	"CODE"

	jsr     decsp1
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     shlax3
	ldy     #$30
	jsr     incaxy
	sta     _p0x
	ldx     #$00
	lda     #$08
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     tosumulax
	ldy     #$20
	jsr     incaxy
	ldy     #$00
	sta     (sp),y
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     shlax3
	ldy     #$30
	jsr     incaxy
	sta     $D000
	ldx     #$00
	lda     _p0y
	jsr     pushax
	ldx     #$78
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     __bzero
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$78
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	lda     #<(_minerData)
	ldx     #>(_minerData)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _memmove
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     _p0y
	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ delay (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_delay: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     _i1
	stx     _i1+1
L03F0:	lda     _i1
	ldx     _i1+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     tosultax
	jne     L03F3
	jmp     L03F1
L03F3:	ldx     #$00
	lda     #$01
	sta     $D40A
	lda     _i1
	ldx     _i1+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     _i1
	stx     _i1+1
	lda     regsave
	ldx     regsave+1
	jmp     L03F0
L03F1:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ doGratulation ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_doGratulation: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     #$00
	sta     $022F
	ldx     #$00
	lda     _menuDl1
	sta     $0230
	ldx     #$00
	lda     _menuDl2
	sta     $0231
	jsr     _clrscr
	lda     #$02
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #<(L0001+259)
	ldx     #>(L0001+259)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #<(L0001+277)
	ldx     #>(L0001+277)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L0001+314)
	ldx     #>(L0001+314)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L0001+347)
	ldx     #>(L0001+347)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L0001+385)
	ldx     #>(L0001+385)
	jsr     _cputsxy
	ldy     #$00
	jsr     _setTextModeSettings
	ldx     #$00
	lda     _dmactlStore
	sta     $022F
	ldx     #$09
	lda     #$C4
	jsr     pushax
	jsr     _delay
	ldy     #$00
	jsr     _rmtPlayGratulation
	jsr     _kbhit
	tax
	jeq     L055B
	jsr     _cgetc
L055B:	jsr     _cgetc
	cmp     #$20
	jsr     booleq
	jeq     L0561
	jmp     L055F
L0561:	jmp     L055B
L055F:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ doGameOver ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_doGameOver: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     #$00
	sta     $022F
	ldx     #$00
	lda     _menuDl1
	sta     $0230
	ldx     #$00
	lda     _menuDl2
	sta     $0231
	jsr     _clrscr
	lda     #$0E
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L0001+409)
	ldx     #>(L0001+409)
	jsr     _cputsxy
	lda     #$09
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L0001+422)
	ldx     #>(L0001+422)
	jsr     _cputsxy
	ldy     #$00
	jsr     _setTextModeSettings
	ldx     #$00
	lda     _dmactlStore
	sta     $022F
	ldx     #$03
	lda     #$E8
	jsr     pushax
	jsr     _delay
	jsr     _kbhit
	tax
	jeq     L0584
	jsr     _cgetc
L0584:	jsr     _cgetc
	cmp     #$20
	jsr     booleq
	jeq     L058A
	jmp     L0588
L058A:	jmp     L0584
L0588:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setTextModeSettings ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setTextModeSettings: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     #$B0
	sta     $02C6
	ldx     #$00
	lda     #$0E
	sta     $02C5
	ldx     #$00
	lda     #$E0
	sta     $02F4
	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ moveLeft ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveLeft: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     _minx
	cmp     #$00
	jsr     booleq
	jne     L03FF
	ldx     #$00
	lda     _minx
	jsr     decax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	clc
	adc     #<(_passable)
	tay
	txa
	adc     #>(_passable)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     booleq
	jne     L03FF
	ldx     #$00
	lda     #$00
	jeq     L0403
L03FF:	ldx     #$00
	lda     #$01
L0403:	jeq     L03FE
	ldx     #$00
	lda     #$00
	jmp     L03FD
L03FE:	ldx     #$00
	lda     _minx
	pha
	sec
	sbc     #$01
	sta     _minx
	pla
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	jsr     _pmgSetPos
	ldy     #$00
	jsr     _checkTreasure
	ldx     #$00
	lda     _controlDelay
	sta     _mvDelay
	ldx     #$00
	lda     #$01
	jmp     L03FD
L03FD:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ moveRight ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveRight: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     _minx
	cmp     #$13
	jsr     booleq
	jne     L040F
	ldx     #$00
	lda     _minx
	jsr     incax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	clc
	adc     #<(_passable)
	tay
	txa
	adc     #>(_passable)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     booleq
	jne     L040F
	ldx     #$00
	lda     #$00
	jeq     L0413
L040F:	ldx     #$00
	lda     #$01
L0413:	jeq     L040E
	ldx     #$00
	lda     #$00
	jmp     L040D
L040E:	ldx     #$00
	lda     _minx
	pha
	clc
	adc     #$01
	sta     _minx
	pla
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	jsr     _pmgSetPos
	ldy     #$00
	jsr     _checkTreasure
	ldx     #$00
	lda     _controlDelay
	sta     _mvDelay
	ldx     #$00
	lda     #$01
	jmp     L040D
L040D:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ moveUp ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveUp: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     _miny
	cmp     #$00
	jsr     booleq
	jeq     L0440
	jmp     L044A
L0440:	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     decax1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	sta     _x1
	lda     #<(_passable)
	ldx     #>(_passable)
	clc
	adc     _x1
	bcc     L0449
	inx
L0449:	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     booleq
	jeq     L0446
	jmp     L044A
L0446:	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	cmp     #$07
	jsr     booleq
	jeq     L044A
	ldx     #$00
	lda     _x1
	cmp     #$06
	jsr     booleq
	jeq     L044E
	ldx     #$00
	lda     #$00
	sta     _stayHere
	ldx     #$00
	lda     #$01
	sta     _caveDeath
	jmp     L044A
L044E:	ldx     #$00
	lda     _miny
	pha
	sec
	sbc     #$01
	sta     _miny
	pla
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	jsr     _pmgSetPos
	ldy     #$00
	jsr     _checkTreasure
	ldx     #$00
	lda     _controlDelay
	sta     _mvDelay
L044A:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ moveDown ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveDown: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     _miny
	cmp     #$15
	jsr     booleq
	jeq     L041E
	jmp     L0424
L041E:	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	sta     _x1
	lda     #<(_passable)
	ldx     #>(_passable)
	clc
	adc     _x1
	bcc     L0427
	inx
L0427:	ldy     #$00
	jsr     ldauidx
	cmp     #$01
	jsr     booleq
	jeq     L0424
	ldx     #$00
	lda     _miny
	pha
	clc
	adc     #$01
	sta     _miny
	pla
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	jsr     _pmgSetPos
	ldy     #$00
	jsr     _checkTreasure
	ldx     #$00
	lda     _controlDelay
	sta     _mvDelay
L0424:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ jumpUp ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jumpUp: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     _miny
	cmp     #$00
	jsr     booleq
	jeq     L045C
	ldx     #$00
	lda     #$00
	jmp     L045B
L045C:	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     decax1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	sta     _x1
	ldx     #$00
	lda     _x1
	cmp     #$06
	jsr     booleq
	jeq     L0463
	ldx     #$00
	lda     #$00
	sta     _stayHere
	ldx     #$00
	lda     #$01
	sta     _caveDeath
	ldx     #$00
	lda     #$01
	jmp     L045B
L0463:	lda     #<(_passable)
	ldx     #>(_passable)
	clc
	adc     _x1
	bcc     L046D
	inx
L046D:	ldy     #$00
	jsr     ldauidx
	cmp     #$00
	jsr     booleq
	jeq     L046A
	ldx     #$00
	lda     #$00
	jmp     L045B
L046A:	ldx     #$00
	lda     _miny
	pha
	sec
	sbc     #$01
	sta     _miny
	pla
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	jsr     _pmgSetPos
	ldy     #$00
	jsr     _checkTreasure
	ldx     #$00
	lda     #$00
	jmp     L045B
L045B:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fallDown ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fallDown: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     _miny
	cmp     #$15
	jsr     booleq
	jeq     L0430
	jmp     L0436
L0430:	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	sta     _x1
	lda     #<(_passable)
	ldx     #>(_passable)
	clc
	adc     _x1
	bcc     L0439
	inx
L0439:	ldy     #$00
	jsr     ldauidx
	cmp     #$01
	jsr     booleq
	jeq     L0436
	ldx     #$00
	lda     _miny
	pha
	clc
	adc     #$01
	sta     _miny
	pla
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	jsr     _pmgSetPos
	ldy     #$00
	jsr     _checkTreasure
L0436:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handleHighJump ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleHighJump: near

.segment	"CODE"

	jsr     enter
	jsr     decsp2
	ldx     #$00
	lda     #$00
	sta     _y1
	ldx     #$00
	lda     #$09
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     #$03
	sta     _hiJump
	ldx     #$00
	lda     #$00
	sta     _mvDelay
L047E:	ldx     #$00
	lda     _hiJump
	cmp     #$00
	jsr     boolne
	jeq     L047F
	ldy     #$00
	jsr     _jumpUp
	tax
	jeq     L0481
	jmp     L047F
L0481:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$11
	jsr     boolult
	jeq     L0484
	ldx     #$00
	lda     _mvDelay
	cmp     #$00
	jsr     booleq
	jeq     L048E
	ldx     #$00
	lda     $0278
	sta     _hijs
	ldx     #$00
	lda     _hijs
	jmp     L048D
L048D:	cmp     #$07
	jeq     L049A
	cmp     #$0B
	jeq     L0491
	jmp     L04A1
L0491:	lda     _y1
	jeq     L0492
	jmp     L048E
L0492:	ldy     #$00
	jsr     _moveLeft
	tax
	jeq     L0494
	ldx     #$00
	lda     #$01
	sta     _y1
L0494:	jmp     L048E
L049A:	lda     _y1
	jeq     L049B
	jmp     L048E
L049B:	ldy     #$00
	jsr     _moveRight
	tax
	jeq     L049D
L049D:	ldx     #$00
	lda     #$01
	sta     _y1
	jmp     L048E
L04A1:	ldx     #$00
	lda     #$00
	sta     _mvDelay
	jmp     L048E
L048E:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     $0014
	jsr     tosneax
	jeq     L04A4
	ldx     #$00
	lda     $0014
	ldy     #$00
	sta     (sp),y
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	pla
L04A4:	jmp     L0481
L0484:	ldx     #$00
	lda     _hiJump
	cmp     #$02
	jsr     booleq
	jeq     L04AD
	ldx     #$00
	lda     _hijumpSpeedA
	ldy     #$01
	sta     (sp),y
	jmp     L04B1
L04AD:	ldx     #$00
	lda     _hijumpSpeedB
	ldy     #$01
	sta     (sp),y
L04B1:	ldx     #$00
	lda     _hiJump
	pha
	sec
	sbc     #$01
	sta     _hiJump
	pla
	jmp     L047E
L047F:	ldy     #$00
	jsr     _checkDeath
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	cmp     #$10
	jsr     booleq
	jeq     L04B6
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$1D
	ldy     #$00
	jsr     staspidx
	lda     _minx
	jsr     pusha
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     pusha
	lda     #$1D
	jsr     pusha
	jsr     _paintElement
L04B6:	ldy     #$02
	jsr     leavey
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateStatusBar ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateStatusBar: near

.segment	"CODE"

	jsr     enter
	ldy     #$27
	lda     #$00
L04ED:	sta     $9CD0,y
	dey
	bpl     L04ED
	ldx     #$00
	lda     #$02
	sta     _y1
L04EE:	ldx     #$00
	lda     _y1
	jsr     pushax
	ldx     #$00
	lda     _lives
	jsr     incax2
	jsr     tosultax
	jne     L04F1
	jmp     L04EF
L04F1:	ldx     #$00
	lda     _y1
	jsr     pushax
	ldx     #$9C
	lda     #$D0
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$E0
	ldy     #$00
	jsr     staspidx
	ldx     #$00
	lda     _y1
	pha
	clc
	adc     #$01
	sta     _y1
	pla
	jmp     L04EE
L04EF:	ldx     #$00
	lda     #$2C
	sta     $9CD0
	ldx     #$00
	lda     #$1A
	sta     $9CD1
	ldx     #$9C
	lda     #$EB
	sta     _i1
	stx     _i1+1
	ldx     #$00
	lda     #$00
	sta     _y1
L0507:	ldx     #$00
	lda     _y1
	jsr     pushax
	ldx     #$00
	lda     _currentCave
	jsr     incax1
	jsr     tosultax
	jne     L050A
	jmp     L0508
L050A:	lda     _i1
	ldx     _i1+1
	jsr     pushax
	ldx     #$00
	lda     #$60
	ldy     #$00
	jsr     staspidx
	lda     _i1
	ldx     _i1+1
	sta     regsave
	stx     regsave+1
	jsr     incax1
	sta     _i1
	stx     _i1+1
	lda     regsave
	ldx     regsave+1
	ldx     #$00
	lda     _y1
	pha
	clc
	adc     #$01
	sta     _y1
	pla
	jmp     L0507
L0508:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkTreasure ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkTreasure: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	sta     _x1
	ldx     #$00
	lda     _x1
	cmp     #$14
	jsr     booluge
	jeq     L04D4
	ldx     #$00
	lda     _x1
	cmp     #$17
	jsr     boolult
	jne     L04D3
L04D4:	ldx     #$00
	lda     #$00
	jeq     L04D5
L04D3:	ldx     #$00
	lda     #$01
L04D5:	jeq     L04D2
	ldx     #$00
	lda     _collected
	pha
	clc
	adc     #$01
	sta     _collected
	pla
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$1D
	ldy     #$00
	jsr     staspidx
	lda     _minx
	jsr     pusha
	lda     _miny
	jsr     pusha
	lda     #$1D
	jsr     pusha
	jsr     _paintElement
	ldy     #$00
	jsr     _rmtPlayDiamond
	ldx     #$00
	lda     _collected
	jsr     pushax
	ldx     #$00
	lda     _treasure
	jsr     toseqax
	jeq     L04E0
	ldx     #$00
	lda     #$00
	sta     _stayHere
	ldx     #$00
	lda     #$01
	sta     _caveAllPicked
L04E0:	ldx     #$00
	lda     #$01
	jmp     L04CD
L04D2:	ldx     #$00
	lda     #$00
	jmp     L04CD
L04CD:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkDeath ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkDeath: near

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     _minx
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_cave)
	tay
	txa
	adc     #>(_cave)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _miny
	jsr     incax1
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	sta     _x1
	ldx     #$00
	lda     _x1
	cmp     #$01
	jsr     booleq
	jeq     L04C7
	ldx     #$00
	lda     #$00
	sta     _stayHere
	ldx     #$00
	lda     #$01
	sta     _caveDeath
L04C7:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawMainMenu ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawMainMenu: near

.segment	"CODE"

	jsr     enter
	jsr     decsp1
	ldx     #$00
	lda     $022F
	sta     _dmactlStore
	ldx     #$00
	lda     #$00
	sta     $022F
	ldx     #$00
	lda     _menuDl1
	sta     $0230
	ldx     #$00
	lda     _menuDl2
	sta     $0231
	ldy     #$00
	jsr     _setTextModeSettings
	jsr     _clrscr
	lda     #$07
	jsr     pusha
	lda     #$01
	jsr     pusha
	lda     #<(L0001+27)
	ldx     #>(L0001+27)
	jsr     _cputsxy
	lda     #$0B
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #<(L0001+53)
	ldx     #>(L0001+53)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$13
	jsr     pusha
	lda     #<(L0001+72)
	ldx     #>(L0001+72)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L0001+109)
	ldx     #>(L0001+109)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$15
	jsr     pusha
	lda     #<(L0001+143)
	ldx     #>(L0001+143)
	jsr     _cputsxy
	lda     #$26
	jsr     pusha
	lda     #$15
	jsr     pusha
	lda     #<(L0001+166)
	ldx     #>(L0001+166)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$09
	jsr     pusha
	lda     #<(L0001+168)
	ldx     #>(L0001+168)
	jsr     _cputsxy
	lda     #$0E
	jsr     pusha
	lda     #$09
	jsr     pusha
	lda     #<(L0001+174)
	ldx     #>(L0001+174)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L0001+188)
	ldx     #>(L0001+188)
	jsr     _cputsxy
	lda     #$0A
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L0001+194)
	ldx     #>(L0001+194)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L0001+216)
	ldx     #>(L0001+216)
	jsr     _cputsxy
	lda     #$0A
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L0001+222)
	ldx     #>(L0001+222)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$08
	jsr     pusha
	lda     #$09
	jsr     pusha
	lda     #<(L0001+241)
	ldx     #>(L0001+241)
	jsr     _cputsxy
	lda     #$08
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L0001+247)
	ldx     #>(L0001+247)
	jsr     _cputsxy
	lda     #$08
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L0001+249)
	ldx     #>(L0001+249)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	ldx     #$00
	lda     #$01
	ldy     #$00
	sta     (sp),y
L0100:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$27
	jsr     boolult
	jne     L0103
	jmp     L0101
L0103:	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$03
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$16
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$12
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$00
	sta     (sp),y
	pla
	jmp     L0100
L0101:	lda     #$23
	jsr     pusha
	lda     #$0C
	jsr     _gotoxy
	lda     #<(L0001+251)
	ldx     #>(L0001+251)
	jsr     pushax
	ldx     #$00
	lda     _startingCave
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	lda     #$1D
	jsr     pusha
	lda     #$0E
	jsr     pusha
	ldx     #$00
	lda     _controlSpeed
	jsr     aslax1
	clc
	adc     #<(_difficultyNames)
	tay
	txa
	adc     #>(_difficultyNames)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _cputsxy
	lda     #$00
	jsr     _cursor
	ldx     #$00
	lda     _dmactlStore
	sta     $022F
	ldy     #$01
	jsr     leavey
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main ()
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.forceimport	initmainargs

.segment	"CODE"

	jsr     enter
	ldx     #$00
	lda     #$00
	sta     _overType
	jsr     _clrscr
	ldx     #$00
	lda     #$00
	sta     _maxCaveReached
	ldx     #$00
	lda     #$00
	sta     _controlSpeed
	ldx     #$00
	lda     $D01F
	cmp     #$05
	jsr     booleq
	jeq     L0132
	ldx     #$00
	lda     #$0C
	sta     _maxCaveReached
L0132:	ldy     #$00
	jsr     _rmtSuspend
	ldy     #$00
	jsr     _rmtSetVBI
	ldx     #$00
	lda     $0230
	sta     _menuDl1
	ldx     #$00
	lda     $0231
	sta     _menuDl2
	lda     #$00
	jsr     _cursor
	ldy     #$00
	jsr     _pmgInit
L0145:	ldx     #$00
	lda     _overType
	cmp     #$01
	jsr     booleq
	jeq     L0148
	ldy     #$00
	jsr     _doGameOver
L0148:	ldx     #$00
	lda     _overType
	cmp     #$02
	jsr     booleq
	jeq     L014B
	ldy     #$00
	jsr     _doGratulation
L014B:	ldy     #$00
	jsr     _rmtSuspend
	ldy     #$00
	jsr     _rmtInitMenuMusic
	ldy     #$00
	jsr     _rmtResume
	ldx     #$00
	lda     #$01
	sta     _menuResult
	lda     #$01
	jsr     pusha
	lda     #$07
	jsr     pusha
	jsr     _pmgSetPos
	ldy     #$00
	jsr     _drawMainMenu
	jsr     _kbhit
	tax
	jeq     L0157
	jsr     _cgetc
L0157:	ldx     #$00
	lda     _menuResult
	cmp     #$01
	jsr     booleq
	jeq     L015B
	ldx     #$00
	lda     $D01F
	cmp     #$06
	jsr     booleq
	jeq     L015D
	ldx     #$00
	lda     #$03
	sta     _menuResult
	ldx     #$00
	lda     #$00
	sta     $004D
L015D:	jsr     _kbhit
	tax
	jeq     L0180
	jsr     _cgetc
	sta     _x1
	ldx     #$00
	lda     _x1
	cmp     #$63
	jsr     booleq
	jeq     L016C
	ldx     #$00
	lda     _startingCave
	jsr     pushax
	ldx     #$00
	lda     _maxCaveReached
	jsr     tosultax
	jeq     L016E
	ldx     #$00
	lda     _startingCave
	pha
	clc
	adc     #$01
	sta     _startingCave
	pla
	jmp     L0171
L016E:	ldx     #$00
	lda     #$00
	sta     _startingCave
L0171:	lda     #$23
	jsr     pusha
	lda     #$0C
	jsr     _gotoxy
	lda     #<(L0001+255)
	ldx     #>(L0001+255)
	jsr     pushax
	ldx     #$00
	lda     _startingCave
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	jmp     L0157
L016C:	ldx     #$00
	lda     _x1
	cmp     #$1B
	jsr     booleq
	jeq     L017A
	ldy     #$00
	jsr     _rmtAllStop
	ldy     #$00
	jsr     _rmtRestoreVBI
	ldy     #$00
	jsr     _asmReboot
	ldx     #$00
	lda     #$00
	jmp     L0146
L017A:	ldx     #$00
	lda     _x1
	cmp     #$64
	jsr     booleq
	jeq     L0180
	ldx     #$00
	lda     _controlSpeed
	pha
	clc
	adc     #$01
	sta     _controlSpeed
	pla
	ldx     #$00
	lda     _controlSpeed
	cmp     #$03
	jsr     booleq
	jeq     L0183
	ldx     #$00
	lda     #$00
	sta     _controlSpeed
L0183:	lda     #$1D
	jsr     pusha
	lda     #$0E
	jsr     pusha
	ldx     #$00
	lda     _controlSpeed
	jsr     aslax1
	clc
	adc     #<(_difficultyNames)
	tay
	txa
	adc     #>(_difficultyNames)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _cputsxy
L0180:	jmp     L0157
L015B:	ldx     #$00
	lda     _controlSpeed
	jmp     L018D
L018D:	cmp     #$00
	jeq     L0190
	cmp     #$01
	jeq     L01A8
	cmp     #$02
	jeq     L019C
	jmp     L018E
L0190:	ldx     #$00
	lda     #$04
	sta     _hijumpSpeedA
	ldx     #$00
	lda     #$0E
	sta     _hijumpSpeedB
	ldx     #$00
	lda     #$0C
	sta     _brokenSpeed
	ldx     #$00
	lda     #$05
	sta     _controlDelay
	ldx     #$00
	lda     #$03
	sta     _fallSpeed
	jmp     L018E
L019C:	ldx     #$00
	lda     #$00
	sta     _hijumpSpeedA
	ldx     #$00
	lda     #$0A
	sta     _hijumpSpeedB
	ldx     #$00
	lda     #$0E
	sta     _brokenSpeed
	ldx     #$00
	lda     #$06
	sta     _controlDelay
	ldx     #$00
	lda     #$04
	sta     _fallSpeed
	jmp     L018E
L01A8:	ldx     #$00
	lda     #$02
	sta     _hijumpSpeedA
	ldx     #$00
	lda     #$0D
	sta     _hijumpSpeedB
	ldx     #$00
	lda     #$0C
	sta     _brokenSpeed
	ldx     #$00
	lda     #$05
	sta     _controlDelay
	ldx     #$00
	lda     #$03
	sta     _fallSpeed
	jmp     L018E
L018E:	ldx     #$00
	lda     #$00
	sta     _overType
	ldy     #$00
	jsr     _rmtSuspend
	ldy     #$00
	jsr     _rmtAllStop
	ldy     #$00
	jsr     _rmtInitGameMusic
	ldy     #$00
	jsr     _rmtResume
	ldy     #$00
	jsr     _doGame
	jmp     L0145
L0146:	jsr     leave
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sound (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sound: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     $D208
	ldx     #$00
	lda     #$03
	sta     $D20F
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     pushax
	ldx     #$D2
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	ldy     #$00
	jsr     staspidx
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     pushax
	ldx     #$D2
	lda     #$01
	jsr     tosaddax
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
	jsr     incsp4
	rts

.endproc

