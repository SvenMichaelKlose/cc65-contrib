FEATURES {
    STARTADDRESS: default = $0801;
}

SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0100; # 0.5k stack
    __HIMEM__:     type = weak, value = $D000;
}

MEMORY {
	ZP:  start = $0002, size = $001a, type = rw, define = yes;
	LORAM: start = $0340, size = $0440;
    LOADADDR: file = %O,               start = %S - 2,          size = $0002;
    HEADER:   file = %O, define = yes, start = %S,              size = $000D;
    MAIN:     file = %O, define = yes, start = __HEADER_LAST__, size = $b800 - __HEADER_LAST__, fill = yes;
	HIRAM:    file = %O, define = yes, start = $b800, size = $4800;
}

SEGMENTS {
	ZEROPAGE: load = ZP, type = zp, define = yes;	

	FADETAB: load = LORAM, type = bss, define = yes;

    LOADADDR: load = LOADADDR, type = ro;
    # this one is only used to get the target addr for copying the 2nd part, there is no data in it
	PART2DEST: load = HEADER, type = bss, define = yes;
    EXEHDR:   load = HEADER,   type = ro;

	STARTUP: load = MAIN, type = ro;
	INTROCHARSET: load = MAIN, type =rw, define = yes;
	MUSIC: load = MAIN, start=$1000, type = ro, define =yes;
	INIT:   load = MAIN, type = ro, define = yes, optional = yes;
	CODE:   load = MAIN, type = ro;
	COPYCODE: load = MAIN, run = LORAM, type=ro, define=yes;
	RODATA: load = MAIN, type = ro, define = yes;
	DATA:   load = MAIN, type = rw, define = yes;
	GHOSTBYTE: load = MAIN, start=$3fff, type = rw;
	FRAMEBITMAP2: load=MAIN, start=$4000, type = rw, define = yes;
	LOGOBITMAP1: load = MAIN, start=$4000, type = ro, define = yes;
	FRAMEBITMAP1: load = MAIN, start=$4b40, type = rw, define = yes;
	LOGOBITMAP2: load = MAIN, start=$5400, type = rw, define = yes;
	FLDCODE: load = MAIN, start =$5f40, type = ro;
	LOGOSCRN1: load = MAIN, start= $6000, type = ro, define = yes;
	LOGOSCRN2: load = MAIN, start= $6400, type = rw, define = yes;
	FADECODE1: load = MAIN, start =$6800, type = rw, define = yes;
	FADECODE2: load = MAIN, start =$8400, type = rw, define = yes;
    ONCE:     load = MAIN,     type = ro,  define   = yes;
	BSS:    load = MAIN, start=$a000, type = rw, define = yes;
	HEAP: load = MAIN,type = rw, define=yes, optional=yes;

	PART2: load = HIRAM, type =ro, define=yes;
}

FEATURES {
	CONDES: segment = INIT,
		type = constructor,
		label = __CONSTRUCTOR_TABLE__,
		count = __CONSTRUCTOR_COUNT__;
	CONDES: segment = RODATA,
		type = destructor,
		label = __DESTRUCTOR_TABLE__,
		count = __DESTRUCTOR_COUNT__;
	CONDES: segment = RODATA,
		type = interruptor,
		label = __INTERRUPTOR_TABLE__,
		count = __INTERRUPTOR_COUNT__;
}
